SOURCE CODE 
 
#include <SPI.h> 
#include <DMD.h> 
#include <TimerOne.h> 
#include "Arial_black_16.h" 
#include "Arial_Black_16_ISO_8859_1.h" 
#include "Arial14.h" 
#include "SystemFont5x7.h" 
 
#define DISPLAYS_ACROSS 1 // Number of P10 panels used, side by side. 
#define DISPLAYS_DOWN 1 
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN); 
 
char receivedText[100] = "WIRELESS NOTICE BOARD USING ARDUINO!"; // Buffer for 
received text, default message. 
boolean newMessage = false; 
 
void ScanDMD() {  
  dmd.scanDisplayBySPI(); 
} 
 
void setup(void) { 
  Timer1.initialize(1000);           
  Timer1.attachInterrupt(ScanDMD);    
  dmd.clearScreen(true);    
  Serial.begin(9600); // Initialize Serial for HC-05 communication. 
} 
 
void loop(void) { 
  // Check if data is available from Bluetooth. 
  if (Serial.available() > 0) { 
    int i = 0; 
    while (Serial.available() > 0 && i < sizeof(receivedText) - 1) { 
      char receivedChar = Serial.read(); // Read one character. 
      receivedText[i++] = receivedChar; 
      delay(5); // Small delay to ensure data is properly received. 
    } 
    receivedText[i] = '\0'; // Null-terminate the string. 
    newMessage = true; 
  } 
 
  // Display the message on the LED panel. 
  dmd.selectFont(Arial_Black_16_ISO_8859_1); 
  dmd.clearScreen(true); 
WIRELESS NOTICE BOARD USING ARDUINO                                                                                          
Dept. of E&CE, PDACEK 2024-25                                                                38 
 
  dmd.drawMarquee(receivedText, strlen(receivedText), (32 * DISPLAYS_ACROSS) - 1, 0); 
 
  long start = millis(); 
  long timer = start; 
  boolean ret = false; 
  int interval = 100; 
 
  while (!newMessage) { // Keep scrolling until a new message is received. 
    if ((timer + interval) < millis()) { 
      ret = dmd.stepMarquee(-1, 0); 
      timer = millis(); 
    } 
 
    // Check for new data during scrolling. 
    if (Serial.available() > 0) { 
      int i = 0; 
      while (Serial.available() > 0 && i < sizeof(receivedText) - 1) { 
        char receivedChar = Serial.read(); // Read one character. 
        receivedText[i++] = receivedChar; 
        delay(5); // Small delay to ensure data is properly received. 
      } 
      receivedText[i] = '\0'; // Null-terminate the string. 
      newMessage = true; 
    } 
  } 
 
  newMessage = false; // Reset the message flag. 
}
